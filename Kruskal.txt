// Kruskal's algorithm to compute the Minimum Spanning Tree of any connected edge-weighted graph.

KruskalMST(g):

  pq = MinPQ(g.edges())
  mst = Queue()
  uf = UnionFind(g.V())

  while not pq.isEmpty() and mst.size() < g.V() â€“ 1:
    e = pq.deleteMin()
    v = e.either(), w = e.other(v)

    if not uf.connected(v, w):
      mst.enqueue(e)
      uf.union(v, w)
  return most

// UnionFind ADT
// UnionFind(n) create UnionFind structure for n items (0 to n-1)
// void union(p, q) connect the components containing p and q
// int find(p) return an identifier for the component containing p
// bool connected(p, q) true if p and q in same component
// int count() return the number of components 
